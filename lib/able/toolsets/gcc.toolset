require 'pathname'

module GCC

  HEADER_EXTS = [".h", ".hh", ".hp", ".hxx", ".hpp", ".h++", ".tcc"]

  module LinkLibraries

    def link_libs(settings)
      all_libs = Array(settings[:link_libs]) | Array(@config[:link_libs])
      all_libs.map { |lib| '-l'+lib.to_s }
    end
  end

  module CxxExecutable

    def executable(settings)
      build_executable(:cxx, settings, 'g++')
    end
  end

  module CExecutable

    def executable(settings)
      build_executable(:cc, settings, 'gcc')
    end
  end

  module CxxFlags
    def flags(settings, target)
      build_flags(:cxxflags, settings, target)
    end
  end

  module CFlags
    def flags(settings, target)
      build_flags(:cflags, settings, target)
    end
  end

  class Base < Able::Rule

    def initialize(config)
      @config = config
    end

    def build(params)
      target = params.output_paths.first
      sh executable(params.settings), *flags(params.settings, target), '-o', target,
         *filter_inputs(params.input_paths), *link_libs(params.settings)
    end

    def link_libs(_settings)
      []
    end

    def build_option(symbol, prefix, settings)
      options = Array(settings[symbol]) | Array(@config[symbol])
      options.map { |opt| prefix+opt.to_s }
    end

    def build_pairs(symbol, prefix, settings)
      pairs = settings[symbol].to_h.merge(@config[symbol].to_h)
      pairs.map { |key,value| prefix+key.to_s+(value ? '='+value.to_s : '') }
    end

    def build_flags(symbol, settings, extra_flags = [])
      [ENV[symbol.to_s.upcase]] | Array(settings[symbol]) | Array(@config[symbol]) |
          build_option(:lib_dirs, '-L', settings) | extra_flags
    end

    def build_executable(symbol, settings, default)
      ENV[symbol.to_s.upcase] || settings[symbol] || @config[symbol] || default
    end

    def filter_inputs(input_paths)
      input_paths
    end
  end

  class CompilerBase < Base

    def filter_inputs(input_paths)
      input_paths.select do |path|
        str_path = path.to_s.downcase
        not(HEADER_EXTS.any? { |ext| str_path.end_with?(ext) })
      end
    end

    def extra_input_paths(params)
      depfile = Pathname.new(dep_file(params.output_paths.first))
      File.read(depfile).scan(/^[[:print:]]*\:$/).map { |path| path.chop } if depfile.file?
    end

    def extra_output_paths(params)
      Pathname.new(dep_file(params.output_paths.first))
    end

    def dep_file(target)
      target.to_s + ".d"
    end

    def build_flags(symbol, settings, target)
      super(symbol, settings, ['-MMD -MP -MF '+dep_file(target),
                               *build_option(:inc_dirs, '-I', settings),
                               *build_option(:inc_files, '-include ', settings),
                               *build_pairs(:defines, '-D', settings)])
    end
  end

  class CompileObj < CompilerBase

    def make_output_files(input_files)
      input_files.map { |f| f + ".o" }
    end

    def build_flags(symbol, settings, target)
      super(symbol, settings, target) | ['-c']
    end
  end

  class CxxCompileObj < CompileObj
    include CxxExecutable
    include CxxFlags
  end

  class CCompileObj < CompileObj
    include CExecutable
    include CFlags
  end

  class CxxCompile < CompilerBase
    include LinkLibraries
    include CxxExecutable
    include CxxFlags
  end

  class CCompile < CompilerBase
    include LinkLibraries
    include CExecutable
    include CFlags
  end

  class CLinkBase < Base
    include LinkLibraries

    def flags(settings, _target)
      build_flags(:ldflags, settings)
    end
  end

  class CLink < CLinkBase
    include CExecutable
  end

  class CxxLink < CLinkBase
    include CxxExecutable
  end

  class LdLink < CLinkBase

    def executable(settings)
      build_executable(:ld, settings, 'ld')
    end
  end

  class Archive < Able::Rule

    def build(params)
      executable = ENV['AR'] || params.settings[:ar] || @config[:ar]
      arflags = [ENV['ARFLAGS']] | params.settings[:arflags] | @config[:arflags]
      target = params.output_paths.first
      sh executable, *arflags, 'r', target, params.input_paths
    end
  end
end

rule :ccobj, GCC::CCompileObj
rule :cxxobj, GCC::CxxCompileObj
rule :cc, GCC::CCompile
rule :cxx, GCC::CxxCompile
rule :clink, GCC::CLink
rule :cxxlink, GCC::CxxLink
rule :link, GCC::LdLink
rule :ar, GCC::Archive
