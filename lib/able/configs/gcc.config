require 'pathname'

module GCC

  HEADER_EXTS = [".h", ".hh", ".hp", ".hxx", ".hpp", ".h++", ".tcc"]
 
  FLAGS_MAP = {
    :defines          => -> (arg) { Array(arg).map { |d| "-D#{d}" }.join(' ') },
    :standard         => -> (arg) { "-std=#{arg}" },
    :includes         => -> (arg) { Array(arg).map { |i| "-include #{i}" }.join(' ') },
    :incdirs          => -> (arg) { Array(arg).map { |id| "-I#{id}" }.join(' ') },
    :libdirs          => -> (arg) { Array(arg).map { |ld| "-L#{ld}" }.join(' ') },
    :raw              => -> (arg) { String(arg) },
    :libs             => -> (arg) {},
    :O2               => -> (arg) { "-O2" if arg }
  }
 
  class CompilerBase < Able::Rule

    def initialize(executable, prefix_options, suffix_options)
      @executable = executable
      @prefix_options = Array(prefix_options)
      @suffix_options = Array(suffix_options)
    end

    def flags2libs(flags)
      Array(flags[:libs]).map { |l| "-l#{l}" }
    end

    def flags2opts(flags)
      flags.map do |flag, value|
        handler = FLAGS_MAP[flag]
        if handler
          handler.call(value)
        else
          flag.length > 1 ? "--#{flag}=#{value}" : "-#{flag} #{value}"
        end
      end
    end

    def make_output_files(input_files)
      input_files.map { |f| f + ".o" }
    end

    def do_build(input_paths, target, prefix_opts, suffix_opts)
      sh @executable, *@prefix_options, *prefix_opts, '-o', target, *input_paths, *@suffix_options, *suffix_opts
    end

    def build(input_paths, output_paths, flags)
      do_build Array(input_paths), Array(output_paths).first, flags2opts(flags), flags2libs(flags)
    end

  end

  class CompileObj < CompilerBase

    def dep_file(target)
      target.to_s + ".d"
    end

    def filter_headers(input_paths)
      inputs = Array(input_paths)
      inputs.select do |path|
        str_path = path.to_s.downcase
        not(HEADER_EXTS.any? { |ext| str_path.end_with?(ext) })
      end
    end

    def initialize(executable, prefix_options, suffix_options)
      super(executable, Array(prefix_options) | ["-c"], suffix_options)
    end

    def build(input_paths, output_paths, flags)
      target = Array(output_paths).first
      inputs = filter_headers(input_paths)
      do_build Array(input_paths), target, flags2opts(flags) | ["-MMD -MP -MF #{dep_file(target)}"], flags2libs(flags)
    end

    def extra_input_paths(input_paths, output_paths, flags)
      depfile = Pathname.new(dep_file(output_paths.first))
      File.read(depfile).scan(/^[[:print:]]*\:$/).map { |path| path.chop } if depfile.file?
    end

    def extra_output_paths(input_paths, output_paths, flags)
      Pathname.new(dep_file(output_paths.first))
    end

  end

  class CxxCompileObj < CompileObj
    def initialize(prefix, prefix_options, suffix_options)
      super("#{prefix}g++", prefix_options, suffix_options)
    end
  end

  class CCompileObj < CompileObj
    def initialize(prefix, prefix_options, suffix_options)
      super("#{prefix}gcc", prefix_options, suffix_options)
    end
  end

  class CxxCompile < CompilerBase
    def initialize(prefix, prefix_options, suffix_options)
      super("#{prefix}g++", prefix_options, suffix_options)
    end
  end

  class CCompile < CompilerBase
    def initialize(prefix, prefix_options, suffix_options)
      super("#{prefix}gcc", prefix_options, suffix_options)
    end
  end

end

rule :ccobj, GCC::CCompileObj.new(ENV["CROSS_PREFIX"], nil, nil)
rule :cxxobj, GCC::CxxCompileObj.new(ENV["CROSS_PREFIX"], nil, nil)
rule :cc, GCC::CCompile.new(ENV["CROSS_PREFIX"], nil, nil)
rule :cxx, GCC::CxxCompile.new(ENV["CROSS_PREFIX"], nil, nil)

